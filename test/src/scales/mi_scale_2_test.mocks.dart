// Mocks generated by Mockito 5.0.10 from annotations
// in weight_scale/test/src/scales/mi_scale_2_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:typed_data' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weight_scale/src/ble_device.dart' as _i2;
import 'package:weight_scale/src/model/characteristic.dart' as _i6;
import 'package:weight_scale/src/model/service.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [BleDevice].
///
/// See the documentation for Mockito's code generation for more information.
class MockBleDevice extends _i1.Mock implements _i2.BleDevice {
  MockBleDevice() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i3.Stream<_i2.BleDeviceState> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: Stream<_i2.BleDeviceState>.empty())
          as _i3.Stream<_i2.BleDeviceState>);
  @override
  _i2.BleDeviceState get currentState =>
      (super.noSuchMethod(Invocation.getter(#currentState),
          returnValue: _i2.BleDeviceState.connected) as _i2.BleDeviceState);
  @override
  List<_i4.Service> get services =>
      (super.noSuchMethod(Invocation.getter(#services),
          returnValue: <_i4.Service>[]) as List<_i4.Service>);
  @override
  _i3.Future<void> connect({Duration? timeout = const Duration(seconds: 15)}) =>
      (super.noSuchMethod(Invocation.method(#connect, [], {#timeout: timeout}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> disconnect() =>
      (super.noSuchMethod(Invocation.method(#disconnect, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<List<_i4.Service>> discoverService() =>
      (super.noSuchMethod(Invocation.method(#discoverService, []),
              returnValue: Future<List<_i4.Service>>.value(<_i4.Service>[]))
          as _i3.Future<List<_i4.Service>>);
  @override
  _i3.Future<_i5.Uint8List> readCharacteristic(
          {_i6.Characteristic? characteristic}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #readCharacteristic, [], {#characteristic: characteristic}),
              returnValue: Future<_i5.Uint8List>.value(_i5.Uint8List(0)))
          as _i3.Future<_i5.Uint8List>);
  @override
  _i3.Future<void> writeCharacteristic(
          {_i6.Characteristic? characteristic,
          _i5.Uint8List? value,
          bool? response = true}) =>
      (super.noSuchMethod(
          Invocation.method(#writeCharacteristic, [], {
            #characteristic: characteristic,
            #value: value,
            #response: response
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<_i3.Stream<_i5.Uint8List>> subscribeCharacteristic(
          {_i6.Characteristic? characteristic}) =>
      (super.noSuchMethod(
          Invocation.method(
              #subscribeCharacteristic, [], {#characteristic: characteristic}),
          returnValue: Future<_i3.Stream<_i5.Uint8List>>.value(
              Stream<_i5.Uint8List>.empty())) as _i3
          .Future<_i3.Stream<_i5.Uint8List>>);
}
