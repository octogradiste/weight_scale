// Mocks generated by Mockito 5.0.10 from annotations
// in weight_scale/test/ble_service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:typed_data' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weight_scale/src/ble_device.dart' as _i6;
import 'package:weight_scale/src/ble_operations.dart' as _i2;
import 'package:weight_scale/src/model/characteristic.dart' as _i9;
import 'package:weight_scale/src/model/scan_result.dart' as _i4;
import 'package:weight_scale/src/model/service.dart' as _i7;
import 'package:weight_scale/src/model/uuid.dart' as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [BleOperations].
///
/// See the documentation for Mockito's code generation for more information.
class MockBleOperations extends _i1.Mock implements _i2.BleOperations {
  MockBleOperations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i4.ScanResult>> get scanResults =>
      (super.noSuchMethod(Invocation.getter(#scanResults),
              returnValue: Stream<List<_i4.ScanResult>>.empty())
          as _i3.Stream<List<_i4.ScanResult>>);
  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> startScan(
          {Duration? timeout, List<_i5.Uuid>? withServices}) =>
      (super.noSuchMethod(
          Invocation.method(
              #startScan, [], {#timeout: timeout, #withServices: withServices}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> stopScan() =>
      (super.noSuchMethod(Invocation.method(#stopScan, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> connect(
          {_i6.BleDevice? device,
          Duration? timeout = const Duration(seconds: 15)}) =>
      (super.noSuchMethod(
          Invocation.method(#connect, [], {#device: device, #timeout: timeout}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> disconnect({_i6.BleDevice? device}) =>
      (super.noSuchMethod(Invocation.method(#disconnect, [], {#device: device}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<List<_i7.Service>> discoverService({_i6.BleDevice? device}) =>
      (super.noSuchMethod(
              Invocation.method(#discoverService, [], {#device: device}),
              returnValue: Future<List<_i7.Service>>.value(<_i7.Service>[]))
          as _i3.Future<List<_i7.Service>>);
  @override
  _i3.Future<_i8.Uint8List> readCharacteristic(
          {_i9.Characteristic? characteristic}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #readCharacteristic, [], {#characteristic: characteristic}),
              returnValue: Future<_i8.Uint8List>.value(_i8.Uint8List(0)))
          as _i3.Future<_i8.Uint8List>);
  @override
  _i3.Future<void> writeCharacteristic(
          {_i9.Characteristic? characteristic,
          _i8.Uint8List? value,
          bool? response = true}) =>
      (super.noSuchMethod(
          Invocation.method(#writeCharacteristic, [], {
            #characteristic: characteristic,
            #value: value,
            #response: response
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<_i3.Stream<_i8.Uint8List>> subscribeCharacteristic(
          {_i9.Characteristic? characteristic}) =>
      (super.noSuchMethod(
          Invocation.method(
              #subscribeCharacteristic, [], {#characteristic: characteristic}),
          returnValue: Future<_i3.Stream<_i8.Uint8List>>.value(
              Stream<_i8.Uint8List>.empty())) as _i3
          .Future<_i3.Stream<_i8.Uint8List>>);
}
