// Mocks generated by Mockito 5.4.2 from annotations
// in weight_scale/test/src/ble/backend/fb_ble_device_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_blue_plus/flutter_blue_plus.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weight_scale/src/ble/backend/fb_backend.dart' as _i5;
import 'package:weight_scale/src/ble/ble.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDeviceIdentifier_0 extends _i1.SmartFake
    implements _i2.DeviceIdentifier {
  _FakeDeviceIdentifier_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGuid_1 extends _i1.SmartFake implements _i2.Guid {
  _FakeGuid_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCharacteristicProperties_2 extends _i1.SmartFake
    implements _i2.CharacteristicProperties {
  _FakeCharacteristicProperties_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBleDevice_3 extends _i1.SmartFake implements _i3.BleDevice {
  _FakeBleDevice_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBluetoothDevice_4 extends _i1.SmartFake
    implements _i2.BluetoothDevice {
  _FakeBluetoothDevice_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScanResult_5 extends _i1.SmartFake implements _i3.ScanResult {
  _FakeScanResult_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScanResult_6 extends _i1.SmartFake implements _i2.ScanResult {
  _FakeScanResult_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeService_7 extends _i1.SmartFake implements _i3.Service {
  _FakeService_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBluetoothService_8 extends _i1.SmartFake
    implements _i2.BluetoothService {
  _FakeBluetoothService_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCharacteristic_9 extends _i1.SmartFake
    implements _i3.Characteristic {
  _FakeCharacteristic_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBluetoothCharacteristic_10 extends _i1.SmartFake
    implements _i2.BluetoothCharacteristic {
  _FakeBluetoothCharacteristic_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDescriptor_11 extends _i1.SmartFake implements _i3.Descriptor {
  _FakeDescriptor_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBluetoothDescriptor_12 extends _i1.SmartFake
    implements _i2.BluetoothDescriptor {
  _FakeBluetoothDescriptor_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUuid_13 extends _i1.SmartFake implements _i3.Uuid {
  _FakeUuid_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BluetoothDevice].
///
/// See the documentation for Mockito's code generation for more information.
class MockBluetoothDevice extends _i1.Mock implements _i2.BluetoothDevice {
  MockBluetoothDevice() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DeviceIdentifier get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#id),
        ),
      ) as _i2.DeviceIdentifier);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
      ) as String);
  @override
  _i2.BluetoothDeviceType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i2.BluetoothDeviceType.unknown,
      ) as _i2.BluetoothDeviceType);
  @override
  _i4.Stream<bool> get isDiscoveringServices => (super.noSuchMethod(
        Invocation.getter(#isDiscoveringServices),
        returnValue: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);
  @override
  _i4.Stream<List<_i2.BluetoothService>> get services => (super.noSuchMethod(
        Invocation.getter(#services),
        returnValue: _i4.Stream<List<_i2.BluetoothService>>.empty(),
      ) as _i4.Stream<List<_i2.BluetoothService>>);
  @override
  _i4.Stream<_i2.BluetoothDeviceState> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i4.Stream<_i2.BluetoothDeviceState>.empty(),
      ) as _i4.Stream<_i2.BluetoothDeviceState>);
  @override
  _i4.Stream<int> get mtu => (super.noSuchMethod(
        Invocation.getter(#mtu),
        returnValue: _i4.Stream<int>.empty(),
      ) as _i4.Stream<int>);
  @override
  _i4.Future<bool> get canSendWriteWithoutResponse => (super.noSuchMethod(
        Invocation.getter(#canSendWriteWithoutResponse),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<void> connect({
    Duration? timeout,
    bool? autoConnect = true,
    bool? shouldClearGattCache = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {
            #timeout: timeout,
            #autoConnect: autoConnect,
            #shouldClearGattCache: shouldClearGattCache,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> pair() => (super.noSuchMethod(
        Invocation.method(
          #pair,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> clearGattCache() => (super.noSuchMethod(
        Invocation.method(
          #clearGattCache,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<List<_i2.BluetoothService>> discoverServices() =>
      (super.noSuchMethod(
        Invocation.method(
          #discoverServices,
          [],
        ),
        returnValue: _i4.Future<List<_i2.BluetoothService>>.value(
            <_i2.BluetoothService>[]),
      ) as _i4.Future<List<_i2.BluetoothService>>);
  @override
  _i4.Future<int> requestMtu(int? desiredMtu) => (super.noSuchMethod(
        Invocation.method(
          #requestMtu,
          [desiredMtu],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<int> readRssi() => (super.noSuchMethod(
        Invocation.method(
          #readRssi,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<void> requestConnectionPriority(
          {required _i2.ConnectionPriority? connectionPriorityRequest}) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestConnectionPriority,
          [],
          {#connectionPriorityRequest: connectionPriorityRequest},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> setPreferredPhy({
    required int? txPhy,
    required int? rxPhy,
    required _i2.PhyOption? option,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPreferredPhy,
          [],
          {
            #txPhy: txPhy,
            #rxPhy: rxPhy,
            #option: option,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<bool> removeBond() => (super.noSuchMethod(
        Invocation.method(
          #removeBond,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [BluetoothCharacteristic].
///
/// See the documentation for Mockito's code generation for more information.
class MockBluetoothCharacteristic extends _i1.Mock
    implements _i2.BluetoothCharacteristic {
  MockBluetoothCharacteristic() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Guid get uuid => (super.noSuchMethod(
        Invocation.getter(#uuid),
        returnValue: _FakeGuid_1(
          this,
          Invocation.getter(#uuid),
        ),
      ) as _i2.Guid);
  @override
  _i2.DeviceIdentifier get deviceId => (super.noSuchMethod(
        Invocation.getter(#deviceId),
        returnValue: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#deviceId),
        ),
      ) as _i2.DeviceIdentifier);
  @override
  _i2.Guid get serviceUuid => (super.noSuchMethod(
        Invocation.getter(#serviceUuid),
        returnValue: _FakeGuid_1(
          this,
          Invocation.getter(#serviceUuid),
        ),
      ) as _i2.Guid);
  @override
  _i2.CharacteristicProperties get properties => (super.noSuchMethod(
        Invocation.getter(#properties),
        returnValue: _FakeCharacteristicProperties_2(
          this,
          Invocation.getter(#properties),
        ),
      ) as _i2.CharacteristicProperties);
  @override
  List<_i2.BluetoothDescriptor> get descriptors => (super.noSuchMethod(
        Invocation.getter(#descriptors),
        returnValue: <_i2.BluetoothDescriptor>[],
      ) as List<_i2.BluetoothDescriptor>);
  @override
  List<int> get lastValue => (super.noSuchMethod(
        Invocation.getter(#lastValue),
        returnValue: <int>[],
      ) as List<int>);
  @override
  set lastValue(List<int>? _lastValue) => super.noSuchMethod(
        Invocation.setter(
          #lastValue,
          _lastValue,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Stream<List<int>> get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _i4.Stream<List<int>>.empty(),
      ) as _i4.Stream<List<int>>);
  @override
  _i4.Stream<List<int>> get onValueChangedStream => (super.noSuchMethod(
        Invocation.getter(#onValueChangedStream),
        returnValue: _i4.Stream<List<int>>.empty(),
      ) as _i4.Stream<List<int>>);
  @override
  bool get isNotifying => (super.noSuchMethod(
        Invocation.getter(#isNotifying),
        returnValue: false,
      ) as bool);
  @override
  _i4.Future<List<int>> read() => (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
        ),
        returnValue: _i4.Future<List<int>>.value(<int>[]),
      ) as _i4.Future<List<int>>);
  @override
  _i4.Future<void> write(
    List<int>? value, {
    bool? withoutResponse = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [value],
          {#withoutResponse: withoutResponse},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<bool> setNotifyValue(bool? notify) => (super.noSuchMethod(
        Invocation.method(
          #setNotifyValue,
          [notify],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [FbConversion].
///
/// See the documentation for Mockito's code generation for more information.
class MockFbConversion extends _i1.Mock implements _i5.FbConversion {
  MockFbConversion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BluetoothDeviceState fromBleDeviceState(_i3.BleDeviceState? state) =>
      (super.noSuchMethod(
        Invocation.method(
          #fromBleDeviceState,
          [state],
        ),
        returnValue: _i2.BluetoothDeviceState.disconnected,
      ) as _i2.BluetoothDeviceState);
  @override
  _i3.BleDevice toBleDevice(_i2.BluetoothDevice? device) => (super.noSuchMethod(
        Invocation.method(
          #toBleDevice,
          [device],
        ),
        returnValue: _FakeBleDevice_3(
          this,
          Invocation.method(
            #toBleDevice,
            [device],
          ),
        ),
      ) as _i3.BleDevice);
  @override
  _i2.BluetoothDevice fromBleDevice(_i3.BleDevice? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #fromBleDevice,
          [device],
        ),
        returnValue: _FakeBluetoothDevice_4(
          this,
          Invocation.method(
            #fromBleDevice,
            [device],
          ),
        ),
      ) as _i2.BluetoothDevice);
  @override
  _i3.BleDeviceState toBleDeviceState(_i2.BluetoothDeviceState? state) =>
      (super.noSuchMethod(
        Invocation.method(
          #toBleDeviceState,
          [state],
        ),
        returnValue: _i3.BleDeviceState.connected,
      ) as _i3.BleDeviceState);
  @override
  _i3.ScanResult toScanResult(_i2.ScanResult? scanResult) =>
      (super.noSuchMethod(
        Invocation.method(
          #toScanResult,
          [scanResult],
        ),
        returnValue: _FakeScanResult_5(
          this,
          Invocation.method(
            #toScanResult,
            [scanResult],
          ),
        ),
      ) as _i3.ScanResult);
  @override
  _i2.ScanResult fromScanResult(_i3.ScanResult? scanResult) =>
      (super.noSuchMethod(
        Invocation.method(
          #fromScanResult,
          [scanResult],
        ),
        returnValue: _FakeScanResult_6(
          this,
          Invocation.method(
            #fromScanResult,
            [scanResult],
          ),
        ),
      ) as _i2.ScanResult);
  @override
  _i3.Service toService(_i2.BluetoothService? service) => (super.noSuchMethod(
        Invocation.method(
          #toService,
          [service],
        ),
        returnValue: _FakeService_7(
          this,
          Invocation.method(
            #toService,
            [service],
          ),
        ),
      ) as _i3.Service);
  @override
  _i2.BluetoothService fromService(_i3.Service? service) => (super.noSuchMethod(
        Invocation.method(
          #fromService,
          [service],
        ),
        returnValue: _FakeBluetoothService_8(
          this,
          Invocation.method(
            #fromService,
            [service],
          ),
        ),
      ) as _i2.BluetoothService);
  @override
  _i3.Characteristic toCharacteristic(
          _i2.BluetoothCharacteristic? characteristic) =>
      (super.noSuchMethod(
        Invocation.method(
          #toCharacteristic,
          [characteristic],
        ),
        returnValue: _FakeCharacteristic_9(
          this,
          Invocation.method(
            #toCharacteristic,
            [characteristic],
          ),
        ),
      ) as _i3.Characteristic);
  @override
  _i2.BluetoothCharacteristic fromCharacteristic(
          _i3.Characteristic? characteristic) =>
      (super.noSuchMethod(
        Invocation.method(
          #fromCharacteristic,
          [characteristic],
        ),
        returnValue: _FakeBluetoothCharacteristic_10(
          this,
          Invocation.method(
            #fromCharacteristic,
            [characteristic],
          ),
        ),
      ) as _i2.BluetoothCharacteristic);
  @override
  _i3.Descriptor toDescriptor(_i2.BluetoothDescriptor? descriptor) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDescriptor,
          [descriptor],
        ),
        returnValue: _FakeDescriptor_11(
          this,
          Invocation.method(
            #toDescriptor,
            [descriptor],
          ),
        ),
      ) as _i3.Descriptor);
  @override
  _i2.BluetoothDescriptor fromDescriptor(_i3.Descriptor? descriptor) =>
      (super.noSuchMethod(
        Invocation.method(
          #fromDescriptor,
          [descriptor],
        ),
        returnValue: _FakeBluetoothDescriptor_12(
          this,
          Invocation.method(
            #fromDescriptor,
            [descriptor],
          ),
        ),
      ) as _i2.BluetoothDescriptor);
  @override
  _i3.Uuid toUuid(_i2.Guid? guid) => (super.noSuchMethod(
        Invocation.method(
          #toUuid,
          [guid],
        ),
        returnValue: _FakeUuid_13(
          this,
          Invocation.method(
            #toUuid,
            [guid],
          ),
        ),
      ) as _i3.Uuid);
  @override
  _i2.Guid fromUuid(_i3.Uuid? uuid) => (super.noSuchMethod(
        Invocation.method(
          #fromUuid,
          [uuid],
        ),
        returnValue: _FakeGuid_1(
          this,
          Invocation.method(
            #fromUuid,
            [uuid],
          ),
        ),
      ) as _i2.Guid);
}
