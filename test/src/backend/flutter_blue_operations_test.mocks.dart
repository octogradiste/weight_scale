// Mocks generated by Mockito 5.0.10 from annotations
// in weight_scale/test/src/backend/flutter_blue_operations_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;

import 'package:flutter_blue/flutter_blue.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weight_scale/src/backend/flutter_blue_convert.dart' as _i8;
import 'package:weight_scale/src/ble_device.dart' as _i3;
import 'package:weight_scale/src/ble_operations.dart' as _i9;
import 'package:weight_scale/src/model/characteristic.dart' as _i5;
import 'package:weight_scale/src/model/scan_result.dart' as _i2;
import 'package:weight_scale/src/model/service.dart' as _i4;
import 'package:weight_scale/src/model/uuid.dart' as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeScanResult extends _i1.Fake implements _i2.ScanResult {}

class _FakeBleDevice extends _i1.Fake implements _i3.BleDevice {}

class _FakeService extends _i1.Fake implements _i4.Service {}

class _FakeCharacteristic extends _i1.Fake implements _i5.Characteristic {}

class _FakeUuid extends _i1.Fake implements _i6.Uuid {}

class _FakeBluetoothDevice extends _i1.Fake implements _i7.BluetoothDevice {
  @override
  String toString() => super.toString();
}

class _FakeBluetoothCharacteristic extends _i1.Fake
    implements _i7.BluetoothCharacteristic {
  @override
  String toString() => super.toString();
}

class _FakeGuid extends _i1.Fake implements _i7.Guid {
  @override
  String toString() => super.toString();
}

class _FakeDeviceIdentifier extends _i1.Fake implements _i7.DeviceIdentifier {
  @override
  String toString() => super.toString();
}

class _FakeCharacteristicProperties extends _i1.Fake
    implements _i7.CharacteristicProperties {
  @override
  String toString() => super.toString();
}

/// A class which mocks [FlutterBlueConvert].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterBlueConvert extends _i1.Mock
    implements _i8.FlutterBlueConvert {
  MockFlutterBlueConvert() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ScanResult toScanResult(
          _i7.ScanResult? scanResult, _i9.BleOperations? operations) =>
      (super.noSuchMethod(
          Invocation.method(#toScanResult, [scanResult, operations]),
          returnValue: _FakeScanResult()) as _i2.ScanResult);
  @override
  _i3.BleDevice toBleDevice(
          _i7.BluetoothDevice? device, _i9.BleOperations? operations) =>
      (super.noSuchMethod(Invocation.method(#toBleDevice, [device, operations]),
          returnValue: _FakeBleDevice()) as _i3.BleDevice);
  @override
  _i4.Service toService(_i7.BluetoothService? service) =>
      (super.noSuchMethod(Invocation.method(#toService, [service]),
          returnValue: _FakeService()) as _i4.Service);
  @override
  _i5.Characteristic toCharacteristic(
          _i7.BluetoothCharacteristic? characteristic) =>
      (super.noSuchMethod(
          Invocation.method(#toCharacteristic, [characteristic]),
          returnValue: _FakeCharacteristic()) as _i5.Characteristic);
  @override
  _i6.Uuid toUuid(_i7.Guid? guid) =>
      (super.noSuchMethod(Invocation.method(#toUuid, [guid]),
          returnValue: _FakeUuid()) as _i6.Uuid);
  @override
  _i7.BluetoothDevice toBluetoothDevice(_i3.BleDevice? device) =>
      (super.noSuchMethod(Invocation.method(#toBluetoothDevice, [device]),
          returnValue: _FakeBluetoothDevice()) as _i7.BluetoothDevice);
  @override
  _i7.BluetoothCharacteristic toBluetoothCharacteristic(
          _i5.Characteristic? characteristic) =>
      (super.noSuchMethod(
              Invocation.method(#toBluetoothCharacteristic, [characteristic]),
              returnValue: _FakeBluetoothCharacteristic())
          as _i7.BluetoothCharacteristic);
  @override
  _i7.Guid toGuid(_i6.Uuid? uuid) =>
      (super.noSuchMethod(Invocation.method(#toGuid, [uuid]),
          returnValue: _FakeGuid()) as _i7.Guid);
}

/// A class which mocks [FlutterBlue].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterBlue extends _i1.Mock implements _i7.FlutterBlue {
  MockFlutterBlue() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.LogLevel get logLevel => (super.noSuchMethod(Invocation.getter(#logLevel),
      returnValue: _i7.LogLevel.emergency) as _i7.LogLevel);
  @override
  _i10.Future<bool> get isAvailable =>
      (super.noSuchMethod(Invocation.getter(#isAvailable),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> get isOn => (super.noSuchMethod(Invocation.getter(#isOn),
      returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Stream<bool> get isScanning =>
      (super.noSuchMethod(Invocation.getter(#isScanning),
          returnValue: Stream<bool>.empty()) as _i10.Stream<bool>);
  @override
  _i10.Stream<List<_i7.ScanResult>> get scanResults =>
      (super.noSuchMethod(Invocation.getter(#scanResults),
              returnValue: Stream<List<_i7.ScanResult>>.empty())
          as _i10.Stream<List<_i7.ScanResult>>);
  @override
  _i10.Stream<_i7.BluetoothState> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: Stream<_i7.BluetoothState>.empty())
          as _i10.Stream<_i7.BluetoothState>);
  @override
  _i10.Future<List<_i7.BluetoothDevice>> get connectedDevices =>
      (super.noSuchMethod(Invocation.getter(#connectedDevices),
              returnValue: Future<List<_i7.BluetoothDevice>>.value(
                  <_i7.BluetoothDevice>[]))
          as _i10.Future<List<_i7.BluetoothDevice>>);
  @override
  _i10.Stream<_i7.ScanResult> scan(
          {_i7.ScanMode? scanMode = const _i7.ScanMode(2),
          List<_i7.Guid>? withServices = const [],
          List<_i7.Guid>? withDevices = const [],
          Duration? timeout,
          bool? allowDuplicates = false}) =>
      (super.noSuchMethod(
              Invocation.method(#scan, [], {
                #scanMode: scanMode,
                #withServices: withServices,
                #withDevices: withDevices,
                #timeout: timeout,
                #allowDuplicates: allowDuplicates
              }),
              returnValue: Stream<_i7.ScanResult>.empty())
          as _i10.Stream<_i7.ScanResult>);
  @override
  _i10.Future<dynamic> startScan(
          {_i7.ScanMode? scanMode = const _i7.ScanMode(2),
          List<_i7.Guid>? withServices = const [],
          List<_i7.Guid>? withDevices = const [],
          Duration? timeout,
          bool? allowDuplicates = false}) =>
      (super.noSuchMethod(
          Invocation.method(#startScan, [], {
            #scanMode: scanMode,
            #withServices: withServices,
            #withDevices: withDevices,
            #timeout: timeout,
            #allowDuplicates: allowDuplicates
          }),
          returnValue: Future<dynamic>.value()) as _i10.Future<dynamic>);
  @override
  _i10.Future<dynamic> stopScan() =>
      (super.noSuchMethod(Invocation.method(#stopScan, []),
          returnValue: Future<dynamic>.value()) as _i10.Future<dynamic>);
  @override
  void setLogLevel(_i7.LogLevel? level) =>
      super.noSuchMethod(Invocation.method(#setLogLevel, [level]),
          returnValueForMissingStub: null);
}

/// A class which mocks [BluetoothDevice].
///
/// See the documentation for Mockito's code generation for more information.
class MockBluetoothDevice extends _i1.Mock implements _i7.BluetoothDevice {
  MockBluetoothDevice() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.DeviceIdentifier get id => (super.noSuchMethod(Invocation.getter(#id),
      returnValue: _FakeDeviceIdentifier()) as _i7.DeviceIdentifier);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i7.BluetoothDeviceType get type => (super.noSuchMethod(
      Invocation.getter(#type),
      returnValue: _i7.BluetoothDeviceType.unknown) as _i7.BluetoothDeviceType);
  @override
  _i10.Stream<bool> get isDiscoveringServices =>
      (super.noSuchMethod(Invocation.getter(#isDiscoveringServices),
          returnValue: Stream<bool>.empty()) as _i10.Stream<bool>);
  @override
  _i10.Stream<List<_i7.BluetoothService>> get services =>
      (super.noSuchMethod(Invocation.getter(#services),
              returnValue: Stream<List<_i7.BluetoothService>>.empty())
          as _i10.Stream<List<_i7.BluetoothService>>);
  @override
  _i10.Stream<_i7.BluetoothDeviceState> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: Stream<_i7.BluetoothDeviceState>.empty())
          as _i10.Stream<_i7.BluetoothDeviceState>);
  @override
  _i10.Stream<int> get mtu => (super.noSuchMethod(Invocation.getter(#mtu),
      returnValue: Stream<int>.empty()) as _i10.Stream<int>);
  @override
  _i10.Future<bool> get canSendWriteWithoutResponse =>
      (super.noSuchMethod(Invocation.getter(#canSendWriteWithoutResponse),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<void> connect({Duration? timeout, bool? autoConnect = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #connect, [], {#timeout: timeout, #autoConnect: autoConnect}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<dynamic> disconnect() =>
      (super.noSuchMethod(Invocation.method(#disconnect, []),
          returnValue: Future<dynamic>.value()) as _i10.Future<dynamic>);
  @override
  _i10.Future<List<_i7.BluetoothService>> discoverServices() =>
      (super.noSuchMethod(Invocation.method(#discoverServices, []),
              returnValue: Future<List<_i7.BluetoothService>>.value(
                  <_i7.BluetoothService>[]))
          as _i10.Future<List<_i7.BluetoothService>>);
  @override
  _i10.Future<void> requestMtu(int? desiredMtu) =>
      (super.noSuchMethod(Invocation.method(#requestMtu, [desiredMtu]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BluetoothCharacteristic].
///
/// See the documentation for Mockito's code generation for more information.
class MockBluetoothCharacteristic extends _i1.Mock
    implements _i7.BluetoothCharacteristic {
  MockBluetoothCharacteristic() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Guid get uuid =>
      (super.noSuchMethod(Invocation.getter(#uuid), returnValue: _FakeGuid())
          as _i7.Guid);
  @override
  _i7.DeviceIdentifier get deviceId =>
      (super.noSuchMethod(Invocation.getter(#deviceId),
          returnValue: _FakeDeviceIdentifier()) as _i7.DeviceIdentifier);
  @override
  _i7.Guid get serviceUuid =>
      (super.noSuchMethod(Invocation.getter(#serviceUuid),
          returnValue: _FakeGuid()) as _i7.Guid);
  @override
  _i7.CharacteristicProperties get properties =>
      (super.noSuchMethod(Invocation.getter(#properties),
              returnValue: _FakeCharacteristicProperties())
          as _i7.CharacteristicProperties);
  @override
  List<_i7.BluetoothDescriptor> get descriptors =>
      (super.noSuchMethod(Invocation.getter(#descriptors),
              returnValue: <_i7.BluetoothDescriptor>[])
          as List<_i7.BluetoothDescriptor>);
  @override
  bool get isNotifying =>
      (super.noSuchMethod(Invocation.getter(#isNotifying), returnValue: false)
          as bool);
  @override
  _i10.Stream<List<int>> get value =>
      (super.noSuchMethod(Invocation.getter(#value),
          returnValue: Stream<List<int>>.empty()) as _i10.Stream<List<int>>);
  @override
  List<int> get lastValue =>
      (super.noSuchMethod(Invocation.getter(#lastValue), returnValue: <int>[])
          as List<int>);
  @override
  _i10.Future<List<int>> read() => (super.noSuchMethod(
      Invocation.method(#read, []),
      returnValue: Future<List<int>>.value(<int>[])) as _i10.Future<List<int>>);
  @override
  _i10.Future<Null?> write(List<int>? value, {bool? withoutResponse = false}) =>
      (super.noSuchMethod(
          Invocation.method(
              #write, [value], {#withoutResponse: withoutResponse}),
          returnValue: Future<Null?>.value()) as _i10.Future<Null?>);
  @override
  _i10.Future<bool> setNotifyValue(bool? notify) =>
      (super.noSuchMethod(Invocation.method(#setNotifyValue, [notify]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  String toString() => super.toString();
}
