// Mocks generated by Mockito 5.1.0 from annotations
// in climb_scale/test/services/weight_scale_service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weight_scale/src/ble/ble.dart' as _i6;
import 'package:weight_scale/src/weight_scale.dart' as _i4;
import 'package:weight_scale/src/weight_scale_manager.dart' as _i3;
import 'package:weight_scale/src/weight_scale_recognizer.dart' as _i5;
import 'package:weight_scale/src/weight.dart';

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeStreamController_0<T> extends _i1.Fake
    implements _i2.StreamController<T> {}

/// A class which mocks [WeightScaleHub].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeightScaleHub extends _i1.Mock implements _i3.WeightScaleManager {
  MockWeightScaleHub() {
    _i1.throwOnMissingStub(this);
  }

  _i2.StreamController<List<_i4.WeightScale>> get controller =>
      (super.noSuchMethod(Invocation.getter(#controller),
              returnValue: _FakeStreamController_0<List<_i4.WeightScale>>())
          as _i2.StreamController<List<_i4.WeightScale>>);
  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);
  @override
  List<_i5.WeightScaleRecognizer> get recognizers =>
      (super.noSuchMethod(Invocation.getter(#recognizers),
              returnValue: <_i5.WeightScaleRecognizer>[])
          as List<_i5.WeightScaleRecognizer>);
  @override
  _i2.Stream<List<_i4.WeightScale>> get scales =>
      (super.noSuchMethod(Invocation.getter(#scales),
              returnValue: Stream<List<_i4.WeightScale>>.empty())
          as _i2.Stream<List<_i4.WeightScale>>);
  @override
  _i2.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> startScan({Duration? timeout = const Duration(seconds: 15)}) =>
      (super.noSuchMethod(Invocation.method(#search, [], {#timeout: timeout}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> stopScan() =>
      (super.noSuchMethod(Invocation.method(#stopSearch, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  void register(_i5.WeightScaleRecognizer? recognizer) =>
      super.noSuchMethod(Invocation.method(#register, [recognizer]),
          returnValueForMissingStub: null);
}

/// A class which mocks [WeightScale].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeightScale extends _i1.Mock implements _i4.WeightScale {
  MockWeightScale() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i2.Stream<Weight> get weight =>
      (super.noSuchMethod(Invocation.getter(#weight),
          returnValue: Stream<Weight>.empty()) as _i2.Stream<Weight>);

  WeightUnit get unit => (super.noSuchMethod(Invocation.getter(#unit),
      returnValue: WeightUnit.kg) as WeightUnit);
  @override
  Weight get currentWeight =>
      (super.noSuchMethod(Invocation.getter(#currentWeight), returnValue: Weight(0.0, WeightUnit.kg))
          as Weight);
  @override
  Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as Future<bool>);
  @override
  _i2.Stream<_i6.BleDeviceState> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: Stream<_i6.BleDeviceState>.empty())
          as _i2.Stream<_i6.BleDeviceState>);
  @override
  _i2.Future<void> connect({Duration? timeout = const Duration(seconds: 15)}) =>
      (super.noSuchMethod(Invocation.method(#connect, [], {#timeout: timeout}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> disconnect() =>
      (super.noSuchMethod(Invocation.method(#disconnect, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
}
